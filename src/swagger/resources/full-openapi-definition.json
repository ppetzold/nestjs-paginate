{
  "openapi": "3.0.0",
  "paths": {
    "/test": {
      "get": {
        "operationId": "TestController_test",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve. If you provide invalid value the default page number will applied\n\n**Example:** 1\n\n\n**Default Value:** 1\n\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n\n\n**Example:** 20\n\n\n\n**Default Value:** 20\n\n\n\n**Max Value:** 100\n\n\nIf provided value is greater than max value, max value will be applied.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.id",
            "required": false,
            "in": "query",
            "description": "Filter by id query param.\n\n**Format:** filter.id={$not}:OPERATION:VALUE\n\n\n\n**Example:** filter.id=$btw:John Doe&filter.id=$contains:John Doe\n\n**Available Operations**\n- $eq\n\n- $gt\n\n- $gte\n\n- $in\n\n- $null\n\n- $lt\n\n- $lte\n\n- $btw\n\n- $ilike\n\n- $sw\n\n- $contains\n\n- $not\n\n- $and\n\n- $or",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n\n**Format:** filter.name={$not}:OPERATION:VALUE\n\n\n\n**Example:** filter.name=$eq:John Doe\n\n**Available Operations**\n- $eq\n\n- $not\n\n- $and\n\n- $or",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\nTo sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting\n\n**Format:** {fieldName}:{DIRECTION}\n\n\n**Example:** sortBy=id:DESC\n\n\n**Default Value:** id:DESC\n\n**Available Fields**\n- id\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id:ASC",
                  "id:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n\n**Example:** John\n\n\n**Default Value:** No default value\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n\n**Example:** name\n\n\n**Default Value:** By default all fields mentioned below will be used to search by term\n\n**Available Fields**\n- name\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "List of fields to select.\n\n**Example:** id,name\n\n\n**Default Value:** By default all fields returns. If you want to select only some fields, provide them in query param\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDocumented"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TestDto"
                          }
                        },
                        "meta": {
                          "properties": {
                            "select": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "id",
                                  "name"
                                ]
                              }
                            },
                            "filter": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Test"
        ]
      },
      "post": {
        "operationId": "TestController_testPost",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number to retrieve. If you provide invalid value the default page number will applied\n\n**Example:** 1\n\n\n**Default Value:** 1\n\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of records per page.\n\n\n**Example:** 20\n\n\n\n**Default Value:** 20\n\n\n\n**Max Value:** 100\n\n\nIf provided value is greater than max value, max value will be applied.\n",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.id",
            "required": false,
            "in": "query",
            "description": "Filter by id query param.\n\n**Format:** filter.id={$not}:OPERATION:VALUE\n\n\n\n**Example:** filter.id=$btw:John Doe&filter.id=$contains:John Doe\n\n**Available Operations**\n- $eq\n\n- $gt\n\n- $gte\n\n- $in\n\n- $null\n\n- $lt\n\n- $lte\n\n- $btw\n\n- $ilike\n\n- $sw\n\n- $contains\n\n- $not\n\n- $and\n\n- $or",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.name",
            "required": false,
            "in": "query",
            "description": "Filter by name query param.\n\n**Format:** filter.name={$not}:OPERATION:VALUE\n\n\n\n**Example:** filter.name=$eq:John Doe\n\n**Available Operations**\n- $eq\n\n- $not\n\n- $and\n\n- $or",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Parameter to sort by.\nTo sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting\n\n**Format:** {fieldName}:{DIRECTION}\n\n\n**Example:** sortBy=id:DESC\n\n\n**Default Value:** id:DESC\n\n**Available Fields**\n- id\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "id:ASC",
                  "id:DESC"
                ]
              }
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term to filter result values\n\n**Example:** John\n\n\n**Default Value:** No default value\n\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchBy",
            "required": false,
            "in": "query",
            "description": "List of fields to search by term to filter result values\n\n**Example:** name\n\n\n**Default Value:** By default all fields mentioned below will be used to search by term\n\n**Available Fields**\n- name\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "select",
            "required": false,
            "in": "query",
            "description": "List of fields to select.\n\n**Example:** id,name\n\n\n**Default Value:** By default all fields returns. If you want to select only some fields, provide them in query param\n\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedDocumented"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TestDto"
                          }
                        },
                        "meta": {
                          "properties": {
                            "select": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "id",
                                  "name"
                                ]
                              }
                            },
                            "filter": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                },
                                "name": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Test"
        ]
      }
    }
  },
  "info": {
    "title": "",
    "description": "",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "PaginatedMetaDocumented": {
        "type": "object",
        "properties": {
          "itemsPerPage": {
            "type": "number",
            "title": "Number of items per page"
          },
          "totalItems": {
            "type": "number",
            "title": "Total number of items"
          },
          "currentPage": {
            "type": "number",
            "title": "Current requested page"
          },
          "totalPages": {
            "type": "number",
            "title": "Total number of pages"
          },
          "sortBy": {
            "type": "array",
            "title": "Sorting by columns",
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "ASC",
                      "DESC"
                    ]
                  }
                ]
              }
            }
          },
          "searchBy": {
            "title": "Search by fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "search": {
            "type": "string",
            "title": "Search term"
          },
          "select": {
            "title": "List of selected fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filter": {
            "type": "object",
            "title": "Filters that applied to the query",
            "required": [],
            "additionalProperties": false
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "currentPage",
          "totalPages"
        ]
      },
      "PaginatedLinksDocumented": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "title": "Link to first page"
          },
          "previous": {
            "type": "string",
            "title": "Link to previous page"
          },
          "current": {
            "type": "string",
            "title": "Link to current page"
          },
          "next": {
            "type": "string",
            "title": "Link to next page"
          },
          "last": {
            "type": "string",
            "title": "Link to last page"
          }
        }
      },
      "PaginatedDocumented": {
        "type": "object",
        "properties": {
          "data": {
            "title": "Array of entities",
            "additionalProperties": false,
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "meta": {
            "title": "Pagination Metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedMetaDocumented"
              }
            ]
          },
          "links": {
            "title": "Links to pages",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginatedLinksDocumented"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta",
          "links"
        ]
      },
      "TestDto": {
        "type": "object",
        "properties": {}
      }
    }
  }
}
